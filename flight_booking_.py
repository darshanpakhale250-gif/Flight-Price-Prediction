# -*- coding: utf-8 -*-
"""Flight_Booking .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D4vqgbFaon-PP9nFiFH1xRGeEgG8UP-j
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/Flight_Booking.csv')
df



df.info()

df = df.drop(columns=['Unnamed: 0'])

df.shape

df.info()

df.isnull().sum()

fig = plt.figure(figsize = (10,6))
sns.lineplot(x = 'airline' , y = 'price' , data = df  )
plt.title('Airline vs Price')
plt.xlabel('Airline' , fontsize = 15)
plt.ylabel('Price' , fontsize= 15)
plt.xticks(rotation = 90)
plt.show()

fig = plt.figure(figsize = (10,6))
sns.barplot(x = 'airline' , y = 'price' , data = df , palette='Set2' )
plt.title('Airline vs Price')
plt.xlabel('Airline' , fontsize = 15)
plt.ylabel('Price' , fontsize= 15)
plt.xticks(rotation = 90)
plt.show()
#Price range of all the flights

#Range of price of all the flights of Economy and Business class
fig = plt.figure(figsize = (10,6))
sns.barplot(x = 'class' , y = 'price' , data = df , palette='Set2' , hue = 'airline' )
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Set a style
sns.set_style("whitegrid")  # 'whitegrid', 'darkgrid', 'ticks', 'white'

# Set figure size
plt.figure(figsize=(12,7))

# Create barplot
sns.barplot(
    x='class',
    y='price',
    data=df,
    hue='airline',  # separate bars by airline
    palette=sns.color_palette("Paired", n_colors=df['airline'].nunique()),  # vibrant palette
    edgecolor='black'  # adds a nice border around bars
)

# Add title and axis labels with fonts
plt.title('Price Range of Flights by Class and Airline', fontsize=18, fontweight='bold')
plt.xlabel('Class', fontsize=14, fontweight='bold')
plt.ylabel('Price (in $)', fontsize=14, fontweight='bold')

# Rotate x-axis labels for clarity
plt.xticks(rotation=0, fontsize=12)

# Rotate y-axis ticks slightly for aesthetics
plt.yticks(fontsize=12)

# Show legend outside the plot
plt.legend(title='Airline', bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0, fontsize=12, title_fontsize=13)

# Add gridlines for y-axis
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Optional: add value labels on top of each bar
for p in plt.gca().patches:
    height = p.get_height()
    plt.gca().annotate(f'{int(height)}',
                       (p.get_x() + p.get_width()/2., height),
                       ha='center', va='bottom', fontsize=10, color='black', fontweight='bold', rotation=0)

# Tight layout for better spacing
plt.tight_layout()

# Show plot
plt.show()

#Range of price of flights with source and destination city according to the days left
fig = plt.figure(figsize = (10,6))
sns.barplot(x = 'destination_city' , y = 'price' , data = df , palette='Set2' , hue = 'source_city' )
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Set style
sns.set_style("whitegrid")

# Figure size
plt.figure(figsize=(14,7))

# Bar plot
sns.barplot(
    x='destination_city',
    y='price',
    hue='source_city',
    data=df,
    palette=sns.color_palette("tab20", n_colors=df['source_city'].nunique()),  # vibrant, distinct colors
    edgecolor='black'
)

# Title and labels
plt.title('Flight Price by Source and Destination City', fontsize=18, fontweight='bold')
plt.xlabel('Destination City', fontsize=14, fontweight='bold')
plt.ylabel('Price (in $)', fontsize=14, fontweight='bold')

# Rotate x-axis labels for readability
plt.xticks(rotation=45, fontsize=12)
plt.yticks(fontsize=12)

# Place legend outside plot
plt.legend(title='Source City', bbox_to_anchor=(1.05, 1), loc='upper left', fontsize=12, title_fontsize=13)

# Add gridlines
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Annotate bars with prices
for p in plt.gca().patches:
    height = p.get_height()
    plt.gca().annotate(f'{int(height)}',
                       (p.get_x() + p.get_width()/2., height),
                       ha='center', va='bottom', fontsize=10, fontweight='bold')

# Adjust layout to prevent clipping
plt.tight_layout()

# Show plot
plt.show()

df[['price' , 'days_left' , 'destination_city' ]]

#The price of the ticket increases as the days left for departure decreases
plt.figure(figsize = (10,6))
sns.lineplot(x = 'days_left' , y = 'price' , data = df)
plt.title('Days Left vs Price')
plt.xlabel('Days Left' , fontsize = 15)
plt.ylabel('Price' , fontsize= 15)
plt.show()

#Range of price of flights with source and destination city according to the days left
fig, ax = plt.subplots(1, 2, figsize=(20, 6)) # Create figure and axes

sns.lineplot(x='days_left', y='price', data=df, palette='Set2', hue='source_city', ax=ax[0])
ax[0].set_title('Days Left vs Price by Source City') # Add title to the first subplot
ax[0].set_xlabel('Days Left')
ax[0].set_ylabel('Price')

sns.lineplot(x='days_left', y='price', data=df, palette='Set2', hue='destination_city', ax=ax[1])
ax[1].set_title('Days Left vs Price by Destination City') # Add title to the second subplot
ax[1].set_xlabel('Days Left')
ax[1].set_ylabel('Price')

plt.tight_layout() # Adjust layout to prevent overlapping titles/labels
3###plt.show()

#Visualization of categorical features with countplot
#plt.subplot(nrows, ncols, index)
plt.figure(figsize = (15,23))
plt.subplot(4,2,1)
sns.countplot(x = 'airline' , data = df , palette='Set2')
plt.title('Frequency of airline ')

plt.subplot(4,2,2)
sns.countplot(x = 'source_city' , data = df , palette='Set2')
plt.title('Frequency of source_city ')

plt.subplot(4,2,3)
sns.countplot(x = 'destination_city' , data = df , palette='Set2')
plt.title('Frequency of destination_city')

plt.subplot(4,2,4)
sns.countplot(x = 'class' , data = df , palette='Set2')
plt.title('Frequency of class')

plt.subplot(4,2,5)
sns.countplot(x = 'departure_time' , data = df , palette='Set2')
plt.title('Frequency of days_left')

plt.subplot(4,2,6)
sns.countplot(x = 'stops' , data = df , palette='Set2')
plt.title('Frequency of stops')

plt.subplot(4,2,7)
sns.countplot(x = 'arrival_time' , data = df , palette='Set2')
plt.title('Frequency of duration')


plt.show()

df.info()

#Visualization of categorical features with countplot
#plt.subplot(nrows, ncols, index)
plt.figure(figsize = (20,26))
plt.subplot(5,2,1)
sns.countplot(x = 'airline' , data = df , palette='Set2')
plt.title('Frequency of airline ')

plt.subplot(5,2,2)
sns.countplot(x = 'source_city' , data = df , palette='Set2')
plt.title('Frequency of source_city ')

plt.subplot(5,2,3)
sns.countplot(x = 'destination_city' , data = df , palette='Set2')
plt.title('Frequency of destination_city')

plt.subplot(5,2,4)
sns.countplot(x = 'class' , data = df , palette='Set2')
plt.title('Frequency of class')

plt.subplot(5,2,5)
sns.countplot(x = 'departure_time' , data = df , palette='Set2')
plt.title('Frequency of days_left')

plt.subplot(5,2,6)
sns.countplot(x = 'stops' , data = df , palette='Set2')
plt.title('Frequency of stops')

plt.subplot(5,2,7)
sns.countplot(x = 'arrival_time' , data = df , palette='Set2')
plt.title('Frequency of duration')


plt.show()

#Performing One Hot Encoding for categorical features of a dataframe
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
for col in df.columns:
    if df[col].dtype == 'object':
        df[col] = le.fit_transform(df[col])

df.info()

#Plotting the correlation graph to see the correlation between features and dependent variable.
plt.figure(figsize = (10,5))
sns.heatmap(df.corr() , annot = True , cmap = 'coolwarm')
plt.show()

'''Selecting the features using
VIF. VIF should be less than 5.
So drop the stops feature.'''
from statsmodels.stats.outliers_influence import variance_inflation_factor
col_list = []
for col in df.columns:
  if((df[col].dtype != 'object') & (col != 'price')):
    col_list.append(col)

X = df[col_list]
vif_data = pd.DataFrame()
vif_data["feature"] = X.columns
vif_data["VIF"] = [variance_inflation_factor(X.values, i)
                          for i in range(len(X.columns))]
print(vif_data)

df = df.drop(columns=['flight'])
col_list = []
for col in df.columns:
  if((df[col].dtype != 'object') & (col != 'price')):
    col_list.append(col)

X = df[col_list]
vif_data = pd.DataFrame()
vif_data["feature"] = X.columns
vif_data["VIF"] = [variance_inflation_factor(X.values, i)
                          for i in range(len(X.columns))]
print(vif_data)

X = df.drop(columns=['price'])
y = df['price']
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(X_train, y_train)
y_pred = lr.predict(X_test)
diff = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
diff

'''Calculating r2 score,MAE, MAPE, MSE, RMSE. Root Mean square error(RMSE)
of the Linear regression model is 7259.93 and Mean absolute percentage
error(MAPE) is 34 percent. Lower the RMSE and MAPE better the model.'''
from sklearn.metrics import r2_score, mean_absolute_error
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_percentage_error
import numpy as np

r2_score(y_test, y_pred)
mean_abs_error = mean_absolute_error(y_test, y_pred)
print('Mean Absolute Error:', mean_abs_error)
mean_absolute_percentage_error(y_test, y_pred)
mean_squared_error(y_test, y_pred)
np.sqrt(mean_squared_error(y_test, y_pred))

sns.distplot(y_test , label = 'Actual')
sns.distplot(y_pred , label = 'Predicted')
plt.legend()

from sklearn.tree import DecisionTreeRegressor
dt = DecisionTreeRegressor()
dt.fit(X_train, y_train)
y_pred = dt.predict(X_test)
diff = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
diff

sns.distplot(y_test , label = 'Actual')
sns.distplot(y_pred , label = 'Predicted')
plt.legend()

from sklearn.ensemble import RandomForestRegressor
rf = RandomForestRegressor()
rf.fit(X_train, y_train)
y_pred = rf.predict(X_test)
diff = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
diff

sns.distplot(y_test , label = 'Actual')
sns.distplot(y_pred , label = 'Predicted')
plt.legend()





